package middleware

import (
    "net/http"
    "strings"

    "github.com/gin-gonic/gin"
    "github.com/golang-jwt/jwt/v5"
    "your-project/config"
    "your-project/utils"
)

func AuthMiddleware() gin.HandlerFunc {
    return func(c *gin.Context) {
        // 检查请求路径，如果是公开路由则跳过认证
        if strings.HasPrefix(c.Request.URL.Path, "/api/v1/sites/available") {
            c.Next()
            return
        }

        // 获取Authorization头
        authHeader := c.GetHeader("Authorization")
        if authHeader == "" || !strings.HasPrefix(authHeader, "Bearer ") {
            c.JSON(http.StatusUnauthorized, gin.H{
                "module":     "middleware",
                "statusCode": http.StatusUnauthorized,
                "message":    "未授权访问",
            })
            c.Abort()
            return
        }

        // 提取token
        tokenString := strings.TrimPrefix(authHeader, "Bearer ")
        
        // 验证token
        token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
            return []byte(config.JWTSecret), nil
        })

        if err != nil || !token.Valid {
            c.JSON(http.StatusUnauthorized, gin.H{
                "module":     "middleware",
                "statusCode": http.StatusUnauthorized,
                "message":    "无效的令牌",
            })
            c.Abort()
            return
        }

        // 提取用户信息
        claims, ok := token.Claims.(jwt.MapClaims)
        if !ok {
            c.JSON(http.StatusUnauthorized, gin.H{
                "module":     "middleware",
                "statusCode": http.StatusUnauthorized,
                "message":    "无效的令牌声明",
            })
            c.Abort()
            return
        }

        // 将用户ID存储在上下文中
        c.Set("userID", claims["user_id"])
        
        c.Next()
    }
}
